#!/usr/bin/env node

/**
 * Simple script to help set up environment variables for TradeX OAuth
 * Run with: node setup-env.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

async function setupEnvironment() {
    console.log('üöÄ TradeX OAuth Setup\n');
    console.log('This script will help you create a .env.local file with your Google OAuth credentials.');

    const config = {};

    // Google OAuth
    console.log('üìò Google OAuth Setup:');
    console.log('Get your credentials from: https://console.cloud.google.com/\n');

    const googleClientId = await question('Google Client ID: ');
    if (googleClientId.trim()) {
        config.VITE_GOOGLE_CLIENT_ID = googleClientId.trim();

        const googleClientSecret = await question('Google Client Secret (optional for some configs): ');
        if (googleClientSecret.trim()) {
            config.VITE_GOOGLE_CLIENT_SECRET = googleClientSecret.trim();
        }
    }

    // Generate .env.local content
    let envContent = '# TradeX OAuth Configuration\n';
    envContent += '# Generated by setup-env.js\n\n';

    if (Object.keys(config).length === 0) {
        console.log('\nNo configuration provided. You can set up OAuth later.');
        console.log('See OAUTH_SETUP.md for detailed instructions.');
        rl.close();
        return;
    }

    Object.entries(config).forEach(([key, value]) => {
        envContent += `${key}=${value}\n`;
    });

    envContent += '\n# Add other environment variables as needed\n';

    // Write to .env.local
    const envPath = path.join(__dirname, '.env.local');

    try {
        if (fs.existsSync(envPath)) {
            const overwrite = await question('\n.env.local already exists. Overwrite? (y/N): ');
            if (overwrite.toLowerCase() !== 'y') {
                console.log('Setup cancelled. Your existing .env.local was not modified.');
                rl.close();
                return;
            }
        }

        fs.writeFileSync(envPath, envContent);
        console.log('\n‚úÖ Successfully created .env.local');
        console.log('üîÑ Restart your development server to apply changes');
        console.log('üìñ See OAUTH_SETUP.md for troubleshooting');

    } catch (error) {
        console.error('\n‚ùå Failed to create .env.local:', error.message);
        console.log('\nYou can manually create the file with this content:');
        console.log('\n' + envContent);
    }

    rl.close();
}

setupEnvironment().catch(console.error);
